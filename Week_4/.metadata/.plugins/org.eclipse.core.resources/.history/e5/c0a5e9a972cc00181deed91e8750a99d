
public class BSTree {
	
	private BSTNode root;
	//탐색
	public BSTNode search(int key){
		BSTNode p = root;	//새로운 노드에 옮기고
		while(p != null)
		{
			if(p.getKey() > key){	//노도의 데이터값이 키보다 크면
				p = p.getLeft();	//왼쪽으로
			}
			else if(p.getKey() == key){	//노드의 데이턱값이 키값과 일치하면 
				return p;	//종료
			}
			else
				p = p.getRight();	//데이터값이 키보다 작으면 오른쪽으로
		}
		return p;	//반환
		
	}
	//삽입
	public void insert(int key){
		BSTNode p = root;	//새로운 노드에 옮기고
		BSTNode q = new BSTNode();	//부모노드
		while(p != null){
			if(key == p.getKey())	//키와 데이터값이 같으면
				return;		//리턴
			q = p;	//부모노드에 옮기고
			if(key < p.getKey())	//키값이 데이터값보다 작으면
				p = p.getLeft();	//왼쪽
			else 
				p = p.getRight();	//키값이 데이터값보다 크면 오른쪽
			}
		BSTNode newNode = new BSTNode();	//새로운 노드에 탐색한 노드값정보를 넣고
		newNode.setKey(key);	//넣어줄꺼 생성
		newNode.setRight(null);	//넣어줄꺼 생성
		newNode.setLeft(null);	//넣어줄꺼 생성
		
		if(root == null)	//null이면
			root = newNode;	
		else if(key < q.getKey())	//키값이 부모노드보다 작으면
			q.setLeft(newNode);		//왼쪽에
		else	//키값이 부모노드보다 크면
			q.setRight(newNode);	//오른쪽에
		return;	//리턴
		
	}
	//삭제
	
	public void delete(int key)
	{
		BSTNode parent = root;
		BSTNode p = root;
		boolean isLeftChild = false;
		
		while(p.getKey() != key)
		{
			parent = p;
			if(p.getKey() > key)
			{
				isLeftChild = true;
				p = p.getLeft();
			}
			else
			{
				isLeftChild = false;
				p = p.getRight();
			}
			if(p == null)
				return;
		}
		
		if ((p.getLeft() == null) && (p.getRight() == null))  
			  		{ 
			  			if (p == root)  
			  				root = null; 
			  			if (isLeftChild == true)  
			  				parent.setLeft(null); 
			  			else  
			  				parent.setRight(null); 
			  		} 
			  		// 하나의 자식 == null 
			  		else if((p.getRight() == null) || (p.getLeft() == null))  
			  		{ 
			  			// 하나의 자식 Right == null 
			  			if (p.getRight() == null)  
			  			{ 
			  				if (p == root)  
			  					root = p.getLeft(); 
			  				else if (isLeftChild)  
			  					parent.setLeft(p.getLeft()); 
			  				else  
			  					parent.setRight(p.getLeft()); 
			  			}  
			  			// 하나의 자식 left == null 
			  			else if (p.getLeft() == null)  
			  			{ 
			  				if (p == root)  
			  					root = p.getRight(); 
			  				else if (isLeftChild)  
			  					parent.setLeft(p.getRight()); 
			  				else  
			  					parent.setRight(p.getRight()); 
			  			} 
			  		} 
			  		// 두개의 자식 right subtree minimum value 
			  		else if (p.getLeft() != null && p.getRight() != null)  
			  		{ 
			  			// 오른쪽 서브트리의 최소값을 찾음 
			  			BSTNode min_R = minNode(p); 
			  			if (p == root)  
			  				root = min_R; 
			  			else if (isLeftChild)  
			  				parent.setLeft(min_R); 
			  			else  
			  				parent.setRight(min_R); 
			  			min_R.setLeft(p.getLeft()); 
			  		} 
			  		return; 
			 	} 

	private BSTNode minNode(BSTNode deleteBSTNode){
		BSTNode min = null;
		BSTNode minParent = null;
		BSTNode q = deleteBSTNode.getRight();
		while(q != null)
		{
			minParent = min;
			min = q;
			q = q.getLeft();
		}
		if(min != deleteBSTNode.getRight())
		{
			minParent.setLeft(min.getRight());
			min.setRight(deleteBSTNode.getRight());
		}
		return min;
	}
	
	public void print() {
		printBST(root);
		System.out.println();
	}
	
	private void printBST(BSTNode root) {
		if(root != null) {
			System.out.print("<");
			printBST(root.getLeft());
			System.out.print(root.getKey());
			printBST(root.getRight());
			System.out.print(">");
		}
	}

	
	
}