package Week_3;


public class BTree {
	private TreeNode root;  // 트리형노드 root 생성.
	
	public BTree(){
		this.root = null; // 생성자에 대입값이 없을경우 root는 null
	}
	public BTree(BTree left,Object data, BTree right){ // 대입값을 받은경우의 생성자.
		root = new TreeNode(data);	//data 저장
		root.setLeft(left.root);	//설정
		root.setRight(right.root);	//설정
	}
	public void setRoot(TreeNode root){	//root 설정
		this.root = root;
	}
	public TreeNode getRoot(){	//root를 얻어옴
		return this.root;
	}
	public boolean isEmpty(){   //비어있는지 확인
		return  root == null;	//this.root 반환
	}
	public BTree leftSubTree(){
		BTree leftTree = new BTree(); //왼쪽트리 생성.
		leftTree.root = this.root.getLeft(); // 왼쪽트리의 루트를 현재왼쪽트리로 대입.
		return leftTree; // 반환
		
	}
	public BTree rightSubTree(){	//오른쪽 서브트리 순회
		BTree rightTree = new BTree();	//오른쪽트리 생성
		rightTree.root = this.root.getRight();	//오른쪽트리의 루트를 현재오른쪽 트리로 대입
		return rightTree;	//반환
		
	}
	public Object getRootData(){	//root 가져오기
		return this.root;	//반환값
	}
	public void inorder(){	//트리 중위 순회
		this.B_inorder(this.root);
	}
	private void B_inorder(TreeNode T){
		if(T != null) {
			this.B_inorder(T.getLeft()); // 왼쪽 서브트리를 중위 순회
			System.out.print(T.getData() + " ");	//루트노드를 방문
			this.B_inorder(T.getRight());	//오른쪽 서브트리 중위순회
		}
	}
	public void preorder(){	//트리 전위 순회
		this.B_preorder(this.root);
		
	}
	private void B_preorder(TreeNode T){
		if(T != null) {
			System.out.print(T.getData()+" ");	//루트노드 방문
			B_preorder(T.getLeft());	//왼쪽 서브트리 전위 순회
			B_preorder(T.getRight());	//오른쪽 서브트리 전위 순회
		}
		
	}
	public void postorder(){	//트리후위 순회
		this.B_postorder(this.root);
		
	}
	private void B_postorder(TreeNode T){
		if(T != null) {
			B_postorder(T.getLeft());	//왼쪽 서브트리를 후위순회
			B_postorder(T.getRight());	//오른쪽 서브 트리를 후위순회
			System.out.print(T.getData() + " ");	//루트노드 방문
		}
		
	}
	
	public void levelOrder()	
	{
		B_levelOrder();
	}
	private void B_levelOrder(){	//이진 트리 레벨 순서 순회
		Queue queue = new Queue();
		TreeNode p = root;
		queue.enqueue(p);	//처음 루트값을 넣어줌
		while(!queue.isEmpty()) {	//큐가 비어있지 않으면 
			p = queue.dequeue();	//큐 안에 들어있는걸 빼주고
			if(p != null){		
				System.out.print(p.getData() + " ");	//참조
				queue.enqueue(p.getLeft());		//왼쪽부터 큐 삽입
				queue.enqueue(p.getRight());	//오른쪽부터 큐 삽임
			}
			
		}
		
	}
	/*
	public BTree copy(){
		BTree newTree = new BTree();
		newTree.setRoot(treeCopy(this.root));
		return newTree;
	}
	
	private TreeNode treeCopy(TreeNode T){	//이진 트리 Copy
		TreeNode L;
		TreeNode R;
		TreeNode S;
		if(T != null) {
			L = treeCopy(T.getLeft());
			R = treeCopy(T.getRight());
			S = new TreeNode(L,T.getData(),R);
		}
		return S;
	}
	*/
	public boolean Equal(BTree A){
		return treeEqual(this.root,A.getRoot());
	}
	private boolean treeEqual(TreeNode root, TreeNode A){
		boolean ans = false;
		if(root == null && A == null) {	//둘다 비어있으면 같다
			return true;	//참
		}
		else if(root !=null && A != null) {	//둘다 비어있지 않으면 같다
			if(root.getData() == A.getData())	//값 비교
				ans = treeEqual(root.getLeft(),A.getLeft());	//왼쪽 비교
			if(ans)
				ans = treeEqual(root.getRight(),A.getRight());	//오른쪽 비교
		}
		return ans;	//반환값
	}
	
}