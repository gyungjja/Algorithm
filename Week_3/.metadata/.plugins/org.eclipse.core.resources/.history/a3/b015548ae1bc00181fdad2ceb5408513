package Week_3;


public class BTree {
	private TreeNode root;  // 트리형노드 root 생성.
	
	public BTree(){
		this.root = null; // 생성자에 대입값이 없을경우 root는 null
	}
	public BTree(BTree left,Object data, BTree right){ // 대입값을 받은경우의 생성자.
		root = new TreeNode(data);	//data 저장
		root.setLeft(left.root);	//설정
		root.setRight(right.root);	//설정
	}
	public void setRoot(TreeNode root){	//root 설정
		this.root = root;
	}
	public TreeNode getRoot(){	//root를 얻어옴
		return this.root;
	}
	public boolean isEmpty(){
		return root == null;
		
	}
	public BTree leftSubTree(){
		BTree leftTree = new BTree(); //왼쪽트리 생성.
		leftTree.root = this.root.getLeft(); // 왼쪽트리의 루트를 현재왼쪽트리로 대입.
		return leftTree; // 반환
		
	}
	public BTree rightSubTree(){	//오른쪽 서브트리 순회
		BTree rightTree = new BTree();
		rightTree.root = this.root.getRight();
		return rightTree;
		
	}
	public Object getRootData(){	//root 가져오기
		return this.root;
	}
	public void inorder(){	//트리 중위 순회
		this.B_inorder(this.root);
	}
	private void B_inorder(TreeNode T){
		if(T != null) {
			this.B_inorder(T.getLeft()); // 왼쪽 서브트리를 중위 순회
			System.out.print(T.getData() + " ");	//루트노드를 방문
			this.B_inorder(T.getRight());	//오른쪽 서브트리 중위순회
		}
	}
	public void preorder(){	//트리 전위 순회
		this.B_preorder(this.root);
		
	}
	private void B_preorder(TreeNode T){
		if(T != null) {
			System.out.print(T.getData()+" ");	//루트노드 방문
			B_preorder(T.getLeft());	//왼쪽 서브트리 전위 순회
			B_preorder(T.getRight());	//오른쪽 서브트리 전위 순회
		}
		
	}
	public void postorder(){	//트리후위 순회
		this.B_postorder(this.root);
		
	}
	private void B_postorder(TreeNode T){
		if(T != null) {
			B_postorder(T.getLeft());	//왼쪽 서브트리를 후위순회
			B_postorder(T.getRight());	//오른쪽 서브 트리를 후위순회
			System.out.print(T.getData() + " ");	//루트노드 방문
		}
		
	}
	
	public void levelOrder()	
	{
		B_levelOrder();
	}
	private void B_levelOrder(){	//이진 트리 레벨 순서 순회
		Queue queue = new Queue();
		TreeNode p = root;
		queue.enqueue(p);
		while(!queue.isEmpty()) {
			p = queue.dequeue();
			if(p != null){
				System.out.print(p.getData() + " ");
				queue.enqueue(p.getLeft());
				queue.enqueue(p.getRight());
			}
			
		}
		
	}
	
	public BTree copy(){
		BTree newTree = new BTree();
		newTree.setRoot(treeCopy(this.root));
		return newTree;
	}
	
	private TreeNode treeCopy(TreeNode T){	//이진 트리 Copy
		
		if(T != null) {
			TreeNode L = treeCopy(T.getLeft());
			TreeNode R = treeCopy(T.getRight());
			BTree S = new BTree();
			S.getLeft = L;
			S.getRight() = R;
			S.getData() = T.getData();
			
		}
		return s;
	}
	public boolean Equal(BTree A){
		return treeEqual(this.root,A.getRoot());
	}
	private boolean treeEqual(TreeNode root, TreeNode A){
		boolean ans = false;
		if(root == null && A == null) {
			return true;
		}
		else if(root !=null && A != null) {
			if(root.getData() == A.getData()) {
				ans = true;
				treeEqual(root.getLeft(),A.getLeft());
				treeEqual(root.getRight(),A.getRight());
			}
			else {
				return false;
				
			}
		}
		return ans;
	}
	
}